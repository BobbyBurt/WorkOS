{
    "id": "368fdb38-d4f0-4252-8da4-ab6337bbcae1",
    "sceneType": "SCENE",
    "settings": {
        "exportClass": true,
        "autoImport": true,
        "superClassName": "ProgramBaseScene",
        "preloadPackFiles": [],
        "createMethodName": "editorCreate",
        "sceneKey": "hacking-program",
        "compilerOutputLanguage": "TYPE_SCRIPT",
        "borderY": 60,
        "borderWidth": 400,
        "borderHeight": 400
    },
    "displayList": [
        {
            "type": "Container",
            "id": "d1a3799e-3ded-44d3-a7b3-79ddf2c72294",
            "label": "mainContainer",
            "scope": "PUBLIC",
            "list": [
                {
                    "type": "Rectangle",
                    "id": "39ab2eaf-d9a3-4994-a5f7-ea4c261be15b",
                    "label": "rectangle_1",
                    "y": 60,
                    "originX": 0,
                    "originY": 0,
                    "isFilled": true,
                    "fillColor": "#2c342b",
                    "width": 400,
                    "height": 400
                },
                {
                    "type": "BitmapText",
                    "id": "d8bc6947-dfdd-4d2e-b371-dbf54c0cff4b",
                    "label": "bitmaptext_1",
                    "x": 200,
                    "y": 260,
                    "originX": 0.5,
                    "originY": 0.5,
                    "tintTopLeft": "#15ff06",
                    "tintTopRight": "#15ff06",
                    "tintBottomLeft": "#15ff06",
                    "tintBottomRight": "#15ff06",
                    "text": "HACKING...",
                    "font": "nokia",
                    "align": 1,
                    "fontSize": -24
                },
                {
                    "type": "BitmapText",
                    "id": "41807c2f-e2af-4aa0-bde8-0c8472df126d",
                    "label": "codeText",
                    "scope": "CLASS",
                    "x": 7,
                    "y": 16,
                    "alpha": 0.2,
                    "alphaTopLeft": 0.2,
                    "alphaTopRight": 0.2,
                    "alphaBottomLeft": 0.2,
                    "alphaBottomRight": 0.2,
                    "tintTopLeft": "#15ff06",
                    "tintTopRight": "#15ff06",
                    "tintBottomLeft": "#15ff06",
                    "tintBottomRight": "#15ff06",
                    "text": "create(width: number, height: number, name: string) {\n    // I have a feeling I'll need to have need to access the width and height in this class later on, which isn't possible this way. But I don't want duplicate vars.\n\n    // usually I'd call editorCreate() here but for some reason when the child calls super.create() then editorCreate() doesn't seem to run? So I'm calling both in the child class\n\n    this.debugScene = this.scene.get(\"debug\") as DebugScene;\n    this.desktopScene = this.scene.get(\"desktop\") as DesktopScene;\n\n    this.name = name;\n    this.minimized = false;\n\n    fullscreenHandler.adjustCamera(this.cameras.main);\n\n    this.setupWindow(width, height);\n    this.width = width;\n    this.height = height;\n\n    // program mask\n    this.programMaskRect.setSize(width, height);\n    this.programMaskRect.setPosition(\n      this.windowInitialPosition.x + this.programMaskOffset.x,\n      this.windowInitialPosition.y + this.programMaskOffset.y\n    );\n\n    this.windowPrefab.dragRect.setInteractive({ draggable: true });\n    this.windowPrefab.dragRect.on(\"drag\", this.dragWindow, this);\n    this.windowPrefab.dragRect.on(\"pointerdown\", this.setdragOffset, this);\n\n    this.setupRefocus();\n    this.game.events.addListener(\n      eventKeys.programs.newFocus,\n      (args: { focusedSceneKey: string }) => {\n        if (this.scene.key !== args.focusedSceneKey) {\n          this.setFocus(false);\n        }\n      }\n    );\n    this.setFocus(true);\n    this.game.events.emit(eventKeys.programs.newFocus, {\n      focusedSceneKey: this.scene.key,\n    });\n\n    this.events.emit(\"scene-create\");\n\n    let overlapScene = this.scene.get(\"overlap\") as OverlapScene;\n    this.taskButton = overlapScene.taskbarPrefab.taskButtonMap.get(\n      this.scene.key\n    )!;\n    this.taskButton.appear();\n  }\n\nupdate() {}\n\n  /**\n   * Pointer input callback. Moves all necessary objects.\n   * @param pointer\n   * @param dragX\n   * @param dragY\n   * @returns\n   */\n  private dragWindow(pointer: Phaser.Input.Pointer, dragX: any, dragY: any) {\n    if (!this.desktopScene.desktopGeomRect.contains(pointer.x, pointer.y)) {\n      return;\n    }\n    if (this.minimized) {\n      return;\n    }\n\n    let pointerCameraPos = pointer.positionToCamera(\n      this.cameras.main\n    ) as Phaser.Math.Vector2;\n\n    let x = Phaser.Math.Clamp(\n      pointerCameraPos.x - this.dragOffset.x,\n      this.desktopScene.desktopRect.x -\n        (this.windowPrefab.windowBorder.width - 50),\n      this.desktopScene.desktopRect.x + this.desktopScene.desktopRect.width - 50\n    );\n    let y = Phaser.Math.Clamp(\n      pointerCameraPos.y - this.dragOffset.y,\n      this.desktopScene.desktopRect.y - 15,\n      this.desktopScene.desktopRect.y +\n        this.desktopScene.desktopRect.height -\n        65\n    );\n    // let x = pointer.x;\n    // let y = pointer.y;\n\n    this.windowPrefab.setPosition(x, y);\n    this.programContainer.setPosition(x, y);\n    this.refocusInputRect.setPosition(\n      x + this.programMaskOffset.x,\n      y + this.programMaskOffset.y\n    );\n    this.programMaskRect.setPosition(\n      x + this.programMaskOffset.x,\n      y + this.programMaskOffset.y\n    );\n  }\n\n  public close() {\n    this.scene.stop();\n    this.taskButton.disappear();\n  }\n\n  /**\n   *\n   * @param value if undefined, will toggle state\n   * @returns true if now minimized\n   */\n  public setMinimize(value?: boolean): boolean {\n    if (value == undefined) {\n      value = !this.minimized;\n    }\n    this.scene.setVisible(!value);\n    this.minimized = value;\n    return value;\n  }\n\n  setupWindow(width: number, height: number) {\n    this.windowPrefab = new WindowPrefab(\n      this,\n      this.windowInitialPosition.x,\n      this.windowInitialPosition.y\n    );\n    this.add.existing(this.windowPrefab);\n    this.windowPrefab.setDepth(10);\n    this.windowPrefab.setWindowSize(width + 17, height + 63);\n  }\n\n  /**\n   * Creates a mask from the programMaskRect and sets it to programContainer. To be called by a child class once those are set.\n   */\n  protected setMask() {\n    this.programMask = this.programMaskRect.createGeometryMask();\n    this.programContainer.setMask(this.programMask);\n  }\n\n  /**\n   *\n   * @param value\n   */\n  protected setFocus(value: boolean) {\n    this.refocusInputRect.setVisible(!value);\n    this.windowPrefab.programNameText.setAlpha(value ? 1 : 0.7);\n    this.focused = value;\n\n    if (value) {\n      this.scene.bringToTop();\n      this.scene.bringToTop(\"overlap\");\n      this.scene.bringToTop(\"debug\");\n    }\n\n    if (value) {\n      this.game.events.emit(eventKeys.programs.newFocus, {\n        focusedSceneKey: this.scene.key,\n      });\n    }\n  }\n\n  /** Keep the window origin from jumping to the pointer */\n  setdragOffset(pointer: Phaser.Input.Pointer) {\n    if (!this.desktopScene.desktopGeomRect.contains(pointer.x, pointer.y)) {\n      return;\n    }\n    let pointerCameraPos = pointer.positionToCamera(\n      this.cameras.main\n    ) as Phaser.Math.Vector2;\n    this.dragOffset.x = pointerCameraPos.x - this.windowPrefab.x;\n    this.dragOffset.y = pointerCameraPos.y - this.windowPrefab.y;\n  }\n\n  /** Creates `refocusInputRect`  */\n  setupRefocus() {\n    this.refocusInputRect.setSize(\n      this.programMaskRect.width,\n      this.programMaskRect.height\n    );\n    this.refocusInputRect.setPosition(\n      this.windowInitialPosition.x + this.programMaskOffset.x,\n      this.windowInitialPosition.y + this.programMaskOffset.y\n    );\n    this.refocusInputRect.setDepth(100);\n    // this.refocusInputRect.setAlpha(0.2);\n    this.refocusInputRect.setAlpha(0.01);\n    this.refocusInputRect.setInteractive();\n    this.refocusInputRect.on(\n      \"pointerdown\",\n      () => {\n        this.setFocus(true);\n      },\n      this\n    );\n    this.windowPrefab.dragRect.on(\n      \"pointerdown\",\n      () => {\n        this.setFocus(true);\n      },\n      this\n    );\n  }",
                    "font": "nokia",
                    "fontSize": -8
                },
                {
                    "type": "BitmapText",
                    "id": "6a291d08-14e8-42b1-95b8-12f01092234e",
                    "label": "bitmaptext",
                    "x": 200,
                    "y": 291,
                    "originX": 0.5,
                    "originY": 0.5,
                    "tintTopLeft": "#15ff06",
                    "tintTopRight": "#15ff06",
                    "tintBottomLeft": "#15ff06",
                    "tintBottomRight": "#15ff06",
                    "text": "MASH KEYS TO PROGRESS",
                    "font": "nokia",
                    "align": 1,
                    "fontSize": -16
                },
                {
                    "type": "Rectangle",
                    "id": "f8b293a9-3ef3-4fb4-926d-637d78b8a360",
                    "label": "progressBar",
                    "scope": "CLASS",
                    "x": 50,
                    "y": 311,
                    "originX": 0,
                    "originY": 0,
                    "isFilled": true,
                    "fillColor": "#15ff06",
                    "width": 1,
                    "height": 10
                },
                {
                    "type": "Rectangle",
                    "id": "28db213d-a59a-4fa2-8c0a-03ba7ac657b3",
                    "label": "progressBarOutline",
                    "scope": "CLASS",
                    "x": 50,
                    "y": 311,
                    "originX": 0,
                    "originY": 0,
                    "fillColor": "#15ff06",
                    "strokeColor": "#15ff06",
                    "strokeAlpha": 0.5,
                    "isStroked": true,
                    "width": 300,
                    "height": 10
                },
                {
                    "type": "BitmapText",
                    "id": "2880be66-8626-4d5b-bd81-bf935f3b883b",
                    "label": "codeText_1",
                    "scope": "CLASS",
                    "x": -257,
                    "y": 31,
                    "alpha": 0.1,
                    "alphaTopLeft": 0.1,
                    "alphaTopRight": 0.1,
                    "alphaBottomLeft": 0.1,
                    "alphaBottomRight": 0.1,
                    "tintTopLeft": "#15ff06",
                    "tintTopRight": "#15ff06",
                    "tintBottomLeft": "#15ff06",
                    "tintBottomRight": "#15ff06",
                    "text": "create(width: number, height: number, name: string) {\n    // I have a feeling I'll need to have need to access the width and height in this class later on, which isn't possible this way. But I don't want duplicate vars.\n\n    // usually I'd call editorCreate() here but for some reason when the child calls super.create() then editorCreate() doesn't seem to run? So I'm calling both in the child class\n\n    this.debugScene = this.scene.get(\"debug\") as DebugScene;\n    this.desktopScene = this.scene.get(\"desktop\") as DesktopScene;\n\n    this.name = name;\n    this.minimized = false;\n\n    fullscreenHandler.adjustCamera(this.cameras.main);\n\n    this.setupWindow(width, height);\n    this.width = width;\n    this.height = height;\n\n    // program mask\n    this.programMaskRect.setSize(width, height);\n    this.programMaskRect.setPosition(\n      this.windowInitialPosition.x + this.programMaskOffset.x,\n      this.windowInitialPosition.y + this.programMaskOffset.y\n    );\n\n    this.windowPrefab.dragRect.setInteractive({ draggable: true });\n    this.windowPrefab.dragRect.on(\"drag\", this.dragWindow, this);\n    this.windowPrefab.dragRect.on(\"pointerdown\", this.setdragOffset, this);\n\n    this.setupRefocus();\n    this.game.events.addListener(\n      eventKeys.programs.newFocus,\n      (args: { focusedSceneKey: string }) => {\n        if (this.scene.key !== args.focusedSceneKey) {\n          this.setFocus(false);\n        }\n      }\n    );\n    this.setFocus(true);\n    this.game.events.emit(eventKeys.programs.newFocus, {\n      focusedSceneKey: this.scene.key,\n    });\n\n    this.events.emit(\"scene-create\");\n\n    let overlapScene = this.scene.get(\"overlap\") as OverlapScene;\n    this.taskButton = overlapScene.taskbarPrefab.taskButtonMap.get(\n      this.scene.key\n    )!;\n    this.taskButton.appear();\n  }\n\nupdate() {}\n\n  /**\n   * Pointer input callback. Moves all necessary objects.\n   * @param pointer\n   * @param dragX\n   * @param dragY\n   * @returns\n   */\n  private dragWindow(pointer: Phaser.Input.Pointer, dragX: any, dragY: any) {\n    if (!this.desktopScene.desktopGeomRect.contains(pointer.x, pointer.y)) {\n      return;\n    }\n    if (this.minimized) {\n      return;\n    }\n\n    let pointerCameraPos = pointer.positionToCamera(\n      this.cameras.main\n    ) as Phaser.Math.Vector2;\n\n    let x = Phaser.Math.Clamp(\n      pointerCameraPos.x - this.dragOffset.x,\n      this.desktopScene.desktopRect.x -\n        (this.windowPrefab.windowBorder.width - 50),\n      this.desktopScene.desktopRect.x + this.desktopScene.desktopRect.width - 50\n    );\n    let y = Phaser.Math.Clamp(\n      pointerCameraPos.y - this.dragOffset.y,\n      this.desktopScene.desktopRect.y - 15,\n      this.desktopScene.desktopRect.y +\n        this.desktopScene.desktopRect.height -\n        65\n    );\n    // let x = pointer.x;\n    // let y = pointer.y;\n\n    this.windowPrefab.setPosition(x, y);\n    this.programContainer.setPosition(x, y);\n    this.refocusInputRect.setPosition(\n      x + this.programMaskOffset.x,\n      y + this.programMaskOffset.y\n    );\n    this.programMaskRect.setPosition(\n      x + this.programMaskOffset.x,\n      y + this.programMaskOffset.y\n    );\n  }\n\n  public close() {\n    this.scene.stop();\n    this.taskButton.disappear();\n  }\n\n  /**\n   *\n   * @param value if undefined, will toggle state\n   * @returns true if now minimized\n   */\n  public setMinimize(value?: boolean): boolean {\n    if (value == undefined) {\n      value = !this.minimized;\n    }\n    this.scene.setVisible(!value);\n    this.minimized = value;\n    return value;\n  }\n\n  setupWindow(width: number, height: number) {\n    this.windowPrefab = new WindowPrefab(\n      this,\n      this.windowInitialPosition.x,\n      this.windowInitialPosition.y\n    );\n    this.add.existing(this.windowPrefab);\n    this.windowPrefab.setDepth(10);\n    this.windowPrefab.setWindowSize(width + 17, height + 63);\n  }\n\n  /**\n   * Creates a mask from the programMaskRect and sets it to programContainer. To be called by a child class once those are set.\n   */\n  protected setMask() {\n    this.programMask = this.programMaskRect.createGeometryMask();\n    this.programContainer.setMask(this.programMask);\n  }\n\n  /**\n   *\n   * @param value\n   */\n  protected setFocus(value: boolean) {\n    this.refocusInputRect.setVisible(!value);\n    this.windowPrefab.programNameText.setAlpha(value ? 1 : 0.7);\n    this.focused = value;\n\n    if (value) {\n      this.scene.bringToTop();\n      this.scene.bringToTop(\"overlap\");\n      this.scene.bringToTop(\"debug\");\n    }\n\n    if (value) {\n      this.game.events.emit(eventKeys.programs.newFocus, {\n        focusedSceneKey: this.scene.key,\n      });\n    }\n  }\n\n  /** Keep the window origin from jumping to the pointer */\n  setdragOffset(pointer: Phaser.Input.Pointer) {\n    if (!this.desktopScene.desktopGeomRect.contains(pointer.x, pointer.y)) {\n      return;\n    }\n    let pointerCameraPos = pointer.positionToCamera(\n      this.cameras.main\n    ) as Phaser.Math.Vector2;\n    this.dragOffset.x = pointerCameraPos.x - this.windowPrefab.x;\n    this.dragOffset.y = pointerCameraPos.y - this.windowPrefab.y;\n  }\n\n  /** Creates `refocusInputRect`  */\n  setupRefocus() {\n    this.refocusInputRect.setSize(\n      this.programMaskRect.width,\n      this.programMaskRect.height\n    );\n    this.refocusInputRect.setPosition(\n      this.windowInitialPosition.x + this.programMaskOffset.x,\n      this.windowInitialPosition.y + this.programMaskOffset.y\n    );\n    this.refocusInputRect.setDepth(100);\n    // this.refocusInputRect.setAlpha(0.2);\n    this.refocusInputRect.setAlpha(0.01);\n    this.refocusInputRect.setInteractive();\n    this.refocusInputRect.on(\n      \"pointerdown\",\n      () => {\n        this.setFocus(true);\n      },\n      this\n    );\n    this.windowPrefab.dragRect.on(\n      \"pointerdown\",\n      () => {\n        this.setFocus(true);\n      },\n      this\n    );\n  }",
                    "font": "nokia",
                    "fontSize": -16
                }
            ]
        }
    ],
    "plainObjects": [],
    "meta": {
        "app": "Phaser Editor 2D - Scene Editor",
        "url": "https://phasereditor2d.com",
        "contentType": "phasereditor2d.core.scene.SceneContentType",
        "version": 5
    }
}